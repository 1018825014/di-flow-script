def run(event_dict):\n    # 将 false 替换为 False\n    shipmentData = json.loads(event_dict['shipmentData'])\n\n    omsShipDate = shipmentData.get('shipDate')\n    # 将时间戳转换为秒\n    timestamp_in_seconds = omsShipDate / 1000\n    # 创建UTC时间的datetime对象\n    utc_dt = datetime.datetime.utcfromtimestamp(timestamp_in_seconds)\n    # 转换为UTC+8时区\n    utc_plus_8_dt = utc_dt + datetime.timedelta(hours=8)\n    # 格式化日期时间\n    formatted_date_time = utc_plus_8_dt.strftime('%Y-%m-%d %H:%M:%S')\n\n    packages = shipmentData.get('packages', [])\n    logisticsList = []\n    orderLineList = []\n    for package in packages:\n        itemLines = package.get('itemLines', [])\n        sku_dict = {}\n        for itemLine in itemLines:\n            comma_separated_string = itemLine.get('sn', '')\n            snList = comma_separated_string.split(',') if comma_separated_string else []\n            lineNo = itemLine.get('poLineNo', '')\n            if lineNo is None:\n                return 'lineNo is null.'\n            skuNo = itemLine.get('itemSku', '')\n            skuName = itemLine.get('shipmentItemAttachData', {}).get('skuName', '')\n            quantity = itemLine.get('shippedQty', '')\n            lotNo = itemLine.get('lotNo', '')\n\n            if lineNo in sku_dict:\n                existing_sku = sku_dict[lineNo]\n                if existing_sku['skuNo'] != skuNo or existing_sku['skuName'] != skuName:\n                    return f'Conflict found for lineNo {lineNo}: different skuNo or skuName.'\n\n                existing_sku['quantity'] += quantity\n                if snList:\n                    existing_sku['snList'].extend(copy.deepcopy(snList))\n            else:\n                sku_dict[lineNo] = {\n                    'lineNo': lineNo,\n                    'skuNo': skuNo,\n                    'skuName': skuName,\n                    'qualityLevel': 1,\n                    'quantity': quantity\n                }\n                if snList:\n                    sku_dict[lineNo]['snList'] = copy.deepcopy(snList)\n        skuList = [sku for sku in sku_dict.values()]\n\n        logistic = {\n            'weight': package.get('weight', ''),\n            'length': package.get('length', ''),\n            'width': package.get('width', ''),\n            'height': package.get('height', ''),\n            'volume': package.get('volume', ''),\n            'logisticsCompanyNo': shipmentData.get('carrier', {}).get('scac', ''),\n            'logisticsServiceNo': shipmentData.get('deliveryService', ''),\n            'wayBillNo': package.get('trackingNumber', ''),\n            'skuList': skuList\n        }\n        logisticsList.append(logistic)\n\n    # 构造orderlinelist\n    sku_dict = {}\n    for package in packages:\n        itemLines = package.get('itemLines', [])\n        for itemLine in itemLines:\n            comma_separated_string = itemLine.get('sn', '')\n            snList = comma_separated_string.split(',') if comma_separated_string else []\n            lineNo = itemLine.get('poLineNo', '')\n            if lineNo is None:\n                return 'lineNo is null.'\n            skuNo = itemLine.get('itemSku', '')\n            quantity = itemLine.get('shippedQty', 0)\n            lotNo = itemLine.get('lotNo', '')\n\n            if lineNo in sku_dict:\n                existing_sku = sku_dict[lineNo]\n                if existing_sku['skuNo'] != skuNo:\n                    return f'Conflict found for lineNo {lineNo}: different skuNo.'\n\n                existing_sku['quantity'] += quantity\n                if snList:\n                    if 'snList' not in existing_sku:\n                        existing_sku['snList'] = []\n                    existing_sku['snList'].extend(copy.deepcopy(snList))\n                if lotNo:\n                    found = False\n                    for batch in existing_sku.get('batchs', []):\n                        if batch['batchNo'] == lotNo:\n                            batch['quantity'] += quantity\n                            if snList:\n                                batch['snNoList'].extend(copy.deepcopy(snList))\n                            found = True\n                            break\n                    if not found:\n                        newBatch = {\n                            'batchNo': lotNo,\n                            'quantity': quantity\n                        }\n                        if snList:\n                            newBatch['snNoList'] = copy.deepcopy(snList)\n                        existing_sku['batchs'].append(newBatch)\n            else:\n                batchs = []\n                if lotNo:\n                    batch = {\n                        'batchNo': lotNo,\n                        'quantity': quantity\n                    }\n                    if snList:\n                        batch['snNoList'] = copy.deepcopy(snList)\n                    batchs.append(batch)\n                sku_dict[lineNo] = {\n                    'lineNo': lineNo,\n                    'skuNo': skuNo,\n                    'qualityLevel': 1,\n                    'quantity': quantity\n                }\n                if snList:\n                    sku_dict[lineNo]['snList'] = copy.deepcopy(snList)\n                if batchs:\n                    sku_dict[lineNo]['batchs'] = copy.deepcopy(batchs)\n\n    for lineNo, sku in sku_dict.items():\n        orderLine = {\n            'lineNo': sku['lineNo'],\n            'skuNo': sku['skuNo'],\n            'qualityLevel': sku['qualityLevel'],\n            'quantity': sku['quantity']\n        }\n        if 'snList' in sku and sku['snList'] and sku['snList'] != ['']:\n            orderLine['snNoList'] = copy.deepcopy(sku['snList'])\n        if 'batchs' in sku and sku['batchs']:\n            orderLine['batchs'] = [batch for batch in sku['batchs']]\n        orderLineList.append(orderLine)\n\n    param = {\n        'businessNo': shipmentData.get('purchaseOrderNo', ''),\n        'businessType': shipmentData.get('shipmentAttachData', {}).get('businessType', ''),\n        'receiptNo': shipmentData.get('dispatchNo', ''),\n        'operateTime': formatted_date_time,\n        'warehouseNo': shipmentData.get('accountingCode', ''),\n        'logisticsList': logisticsList,\n        'orderLineList': orderLineList\n    }\n    result = {\n        'param': param,\n        'callbackUrl': shipmentData.get('orderAttachData', {}).get('MISC16', '')\n    }\n    return json.dumps(result)